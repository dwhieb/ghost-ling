dfn {
  font-style:  normal;
  font-weight: bold;
}

i em {
  font-weight: bold;
}

.ex-header {
  text-decoration: underline;
}

.ex-source {
  float:                right;       /* fallback for inline-end */
  float:                inline-end;
  padding-inline-start: 0.25em;
}

/* Increase specificity here to override Ghost styles. */
.ex-table,
.gh-table table.ex-table {

  font-family: var(--font-serif);
  font-size:   1em;
  margin:      0 0 0 -0.5em !important;       /* Override Ghost styles, which are already *super* specific for this. */
  white-space: nowrap;
  word-break:  keep-all;

  & + .ex-source {
    margin: 0 !important; /* Override Ghost styles, which are already *super* specific for this. */
  }

  & :is(td, th) {
    border-bottom: none;                 /* Override Ghost styles. */
    padding:       var(--text-padding);
  }

}

.ex .ex-table {
  & th,
  & > tbody:first-of-type > tr:first-child td,
  & > tr:first-child td {
    padding-block-start: 0;
  }
}

:not(table):has(+ .ex-source) {
  display: inline;
}

.examples {

  --ex-indent: 1.5em;
  --ex-margin: 1em;

  counter-reset:        subexamples;
  list-style-type:      none;
  margin-block:         0;             /* Override user agent stylesheet. */
  margin-bottom:        0;             /* Override Ghost styles. */
  margin-top:           0;             /* Override Ghost styles. */
  padding:              0;
  padding-inline-start: 0;             /* Override user agent stylesheet. */
  padding-left:         0 !important;  /* Override Ghost styles. */

  .ex {

    counter-increment:   examples;
    margin-block:        var(--ex-margin);
    margin-inline-start: var(--ex-indent);
    position:            relative;

    &::before {
      content:           '(' counter(examples) ')';
      left:              calc(var(--ex-indent) * -1);
      margin-inline-end: var(--ex-indent);
      position:          absolute;
    }

  }

}

.gh-article {
  counter-reset: examples;
}

.igl {

  --igl-indent:             0em;
  --igl-horizontal-spacing: 1.25em;
  --igl-vertical-spacing:   0em;

  display: block;

  .ex-header {
    margin-block-end: var(--igl-vertical-spacing);
  }

  .morphemes,
  .words {
    display:             flex;
    flex-flow:           row wrap;
    list-style:          none;
    margin:              0em;
    margin-inline-start: var(--igl-indent);
    padding:             0em;
  }

  .morpheme,
  .word {
    display:            flex;
    flex-direction:     column;
    margin-block-end:   var(--igl-vertical-spacing);
    margin-block-start: var(--igl-vertical-spacing);
  }

  .morpheme > *,
  .word > * {
    margin:  0em;
    padding: 0em;
  }

  li + li,
  .morpheme + .morpheme,
  .word + .word {
    margin-inline-start: var(--igl-horizontal-spacing);
  }

}

.inex, i {
  font-style: italic;
}

/* Tables without (visible) header rows */
/* For some reason .visually-hidden is still leaving some space. */
/* Setting the table to display: block fixes this, but I don't know why. ü§∑üèº‚Äç‚ôÇÔ∏è */
.no-head {
  display: block;
}

.no-head thead {
  /* Visually Hidden */
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

.phon {
  cursor:      copy;
  font-family: var(--font-serif);
  user-select: all;
}

.references {

  list-style:           none;
  margin:               0;
  padding:              0;
  padding-inline-start: 0;             /* Remove user agent padding. */
  padding-left:         0 !important;  /* Override Ghost styles. */

  & li {
    --ref-indent:        2em;
    margin-inline-start: var(--ref-indent);
    padding:             0;
    text-indent:         calc(var(--ref-indent) * -1);
  }

}

.subexamples {

  display:             inline-block;
  list-style-type:     lower-alpha;
  margin-inline-start: 1em;
  margin-top:          0 !important;  /* Override Ghost styles. */
  padding:             0em;
  padding-left:        0 !important;  /* Override Ghost styles. */

  .subex {
    counter-increment: subexamples;
    padding-block-end: 0.5em;
  }

}

:is(.tln, q) {
  cursor:      copy;
  user-select: all;
}

/* When using <q> for translations, use single quotes. */
q {

  quotes: '‚Äò' '‚Äô' '‚Äú' '‚Äù';

  &::before {
    content: open-quote;
  }

  &::after {
    content: close-quote;
  }

}